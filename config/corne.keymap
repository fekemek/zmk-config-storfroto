/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

/ {
    combos { compatible = "zmk,combos"; };

    behaviors {
        iOS_Shift: iOS_Shift {
            compatible = "zmk,behavior-tap-dance";
            label = "IOS_SHIFT";
            #binding-cells = <0>;
            bindings = <&sk LSHIFT>, <&kt LSHIFT>;
        };

        OptBsp: OptBsp {
            compatible = "zmk,behavior-tap-dance";
            label = "OPTBSP";
            #binding-cells = <0>;
            bindings = <&kp BACKSPACE>, <&kp LA(BACKSPACE)>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Alfa {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp ESC         &kp A          &kp W  &kp E        &kp L         &kp LG(D)        &kp Y         &kp U      &kp I        &kp O      &kp P          &kp LEFT_BRACKET
&kp TAB         &kp LG(Z)      &kp S  &kp E        &kp P         &kp LG(MINUS)    &kp H         &kp J      &kp K        &kp L      &kp SEMICOLON  &kp SINGLE_QUOTE
&kp LEFT_SHIFT  &kp LS(LG(Z))  &kp X  &kp C        &kp V         &kp LG(SLASH)    &kp N         &kp M      &kp SLASH    &kp COMMA  &kp PERIOD     &kp BACKSPACE
                                      &lt 2 ENTER  &kp LEFT_GUI  &mo 1            &kp LEFT_ALT  &kp SPACE  &lt 0 ENTER
            >;
        };

        layer_2 {
            bindings = <
&trans  &trans  &trans    &kp UP_ARROW     &trans       &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &kp LEFT  &kp DOWN         &kp RIGHT    &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans    &kp LS(LC(TAB))  &kp LC(TAB)  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                          &trans           &trans       &trans    &trans  &trans  &trans
            >;
        };

        layer_3 {
            bindings = <
&none  &bt BT_CLR_ALL  &bt BT_PRV    &bt BT_NXT    &none   &none        &none  &none   &none  &none  &none  &none
&none  &bt BT_SEL 0    &bt BT_SEL 1  &bt BT_SEL 2  &none   &kp GLOBE    &none  &none   &none  &none  &none  &none
&none  &bt BT_CLR      &out OUT_BLE  &OptBsp       &none   &none        &none  &none   &none  &none  &none  &none
                                     &none         &trans  &none        &none  &trans  &none
            >;
        };
    };
};
